name: Build and Deploy Yii2 Docker App

# 1. Trigger on push to main branch
on:
  push:
    branches: 
      - main  # only run on pushes to 'main'

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        # Get the source code from the repo

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        # Prepare Docker Buildx for building multi-arch images (optional but useful)

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}  # Docker Hub username
          password: ${{ secrets.DOCKER_PASSWORD }}  # Docker Hub password/token
        # Logs into Docker Hub so we can push images&#8203;:contentReference[oaicite:16]{index=16}&#8203;:contentReference[oaicite:17]{index=17}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .                     # build from the project root (where Dockerfile is)
          push: true                    # push the image to registry
          tags: your-dockerhub-username/your-repo:latest  
          # Change 'your-dockerhub-username/your-repo' to your Docker Hub repo name
        # Builds the Docker image and pushes it (tagged "latest")

      - name: Set up SSH agent
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
        # Loads the SSH key so we can SSH into EC2

      - name: Deploy to Docker Swarm on EC2
        run: |
          # Add the EC2 host to known hosts to avoid interactive prompt
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

          # Connect via SSH and update/create the Swarm service
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            docker pull your-dockerhub-username/your-repo:latest
            if docker service ls --format '{{.Name}}' | grep -q '^myapp$'; then
              docker service update --image winith039/Devops-yii2-project.git:latest myapp --with-registry-auth
            else
              docker service create --name myapp --replicas 1 -p 80:80 your-dockerhub-username/your-repo:latest
            fi
EOF
        # This SSH block runs on the EC2 instance:
        # - Logs in to Docker Hub (in case the image is private)
        # - Pulls the new image
        # - If the 'myapp' service exists, updates it to the new image; otherwise creates it
        # Adjust 'myapp' and ports as needed for your app.

